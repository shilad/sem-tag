package org.semtag.sim;

import com.typesafe.config.Config;
import org.apache.commons.lang3.ArrayUtils;
import org.semtag.dao.DaoException;
import org.semtag.dao.DaoFilter;
import org.semtag.dao.TagAppDao;
import org.semtag.model.Item;
import org.semtag.model.TagApp;
import org.semtag.model.TagAppGroup;
import org.semtag.model.concept.ConceptVector;
import org.wikapidia.conf.Configuration;
import org.wikapidia.conf.ConfigurationException;
import org.wikapidia.conf.Configurator;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * This class applies the methods from the Similar interface to items.
 * Unlike TagApps which rely directly on a single concept, items have
 * multiple concepts applied to them through their TagApps, so the
 * similarity algorithms must be more complex.
 *
 * To calculate similarity, it first gathers a concept vector space that
 * consists of all the concepts applied to both items in question. Next,
 * it generates a concept cosimilarity matrix on that vector space for
 * later use. The vector space is then used to generate initial alpha
 * vectors of the items. Generally an alpha vector is a double[] the
 * length of the vector space where aX[n] is the amount of occurences in
 * item X of the nth concept in the vector space, though it can have
 * other meanings. The alpha vectors and matrix are then used to generate
 * beta vectors by multiplying the matrix times the alpha vectors. Finally,
 * cosine similarity is calculated on the beta vectors and returned.
 *
 * To find most similar items, it first gathers potentially similar items.
 * This is done by gathering the most similar concepts to the specified
 * item's concepts and gathering all items that have those concepts. It
 * then calculates the similarity between the first item and each of the
 * gathered items and returns the ones with the highest similarity score.
 * Here, rather than using the normal vector space described above, it
 * uses an aggregated vector space of all the gathered items so that it
 * only needs to generate one underlying concept cosimilarity matrix.
 *
 * To calculate a cosimilarity matrix, it runs a brute force algorithm
 * that manually calculates similarity between each pair of items. Again,
 * rather than using the standard vector space, we use an aggregated
 * vector space so that only one underlying concept cosimilarity matrix
 * must be generated. Only the one triangle of the matrix is actually
 * calculated, the other is copied from the one.
 *
 * In many situations, this class also allows ConceptVectors to be used
 * in place of items, as an item at its core is simply a vector of concepts.
 *
 * @author Ari Weiland
 */
public class ItemSimilar implements Similar<Item> {

    private final TagAppDao helperDao;
    private final ConceptSimilar sim;

    public ItemSimilar(TagAppDao helperDao, ConceptSimilar sim) {
        this.helperDao = helperDao;
        this.sim = sim;
    }

    public TagAppDao getHelperDao() {
        return helperDao;
    }

    public ConceptSimilar getSim() {
        return sim;
    }

    @Override
    public double similarity(Item x, Item y) throws DaoException {
        if (x.equals(y)) {
            return 1;
        }
        int[] vectorSpace = getVectorSpace(x, y);
        double[][] matrix = sim.cosimilarity(vectorSpace);
        return similarity(x, y, vectorSpace, matrix);
    }

    /**
     * Returns the similarity between two items within a given concept ID
     * vectorspace. The matrix MUST have been generated by a call to
     * ConceptSimilar.cosimilarity(vectorSpace), or else the result will
     * be meaningless.
     * @param x
     * @param y
     * @param vectorSpace
     * @param matrix
     * @return
     * @throws DaoException
     */
    public double similarity(Item x, Item y, int[] vectorSpace, double[][] matrix) throws DaoException {
        TagAppGroup groupX = helperDao.getGroup(new DaoFilter().setItemId(x.getItemId()));
        TagAppGroup groupY = helperDao.getGroup(new DaoFilter().setItemId(y.getItemId()));
        int dim = vectorSpace.length;

        // convert to vector form
        double[] aX = new double[dim]; // alpha vector representation of groupX concepts in specified vector space
        double[] aY = new double[dim]; // alpha vector representation of groupY concepts in specified vector space
        for (int i=0; i<dim; i++) {
            for (TagApp t : groupX) {
                if (vectorSpace[i] == t.getConceptId()) {
                    aX[i]++;
                }
            }
            for (TagApp t : groupY) {
                if (vectorSpace[i] == t.getConceptId()) {
                    aY[i]++;
                }
            }
        }
        return cosineSimilarity(aX, aY, matrix);
    }

    /**
     * Returns the similarity between a concept ID vector and an item.
     * Not really intended for use outside of this class.
     * @param vector
     * @param item
     * @return
     * @throws DaoException
     */
    public double similarity(ConceptVector vector, Item item) throws DaoException {
        ConceptVector space = new ConceptVector(vector);
        space.addAll(vector.getVectorSpace());
        int[] vectorSpace = space.getVectorSpace();
        double[][] matrix = sim.cosimilarity(vectorSpace);
        return similarity(vector, item, vectorSpace, matrix);
    }

    /**
     * Returns the similarity between a concept ID vector and an item.
     * Not really intended for use outside of this class.
     * The matrix MUST have been generated by a call to
     * ConceptSimilar.cosimilarity(vectorSpace), or else the result will
     * be meaningless.
     * @param vector
     * @param item
     * @param vectorSpace
     * @param matrix
     * @return
     * @throws DaoException
     */
    public double similarity(ConceptVector vector, Item item, int[] vectorSpace, double[][] matrix) throws DaoException {
        TagAppGroup group = helperDao.getGroup(new DaoFilter().setItemId(item.getItemId()));
        int dim = vectorSpace.length;

        // convert to alpha vector form
        double[] aX = new double[dim]; // alpha vector representation of vector concepts in specified vector space
        double[] aY = new double[dim]; // alpha vector representation of item concepts in specified vector space
        for (int i=0; i<dim; i++) {
            for (int id : vector.getVectorSpace()) {
                if (vectorSpace[i] == id) {
                    aX[i] += vector.get(id);
                }
            }
            for (TagApp t : group) {
                if (vectorSpace[i] == t.getConceptId()) {
                    aY[i]++;
                }
            }
        }
        return cosineSimilarity(aX, aY, matrix);
    }

    /**
     * Private cosine similarity method defines how ItemSimilar calculates
     * cosine similarity for two alpha vectors and a given matrix.
     * @param aX
     * @param aY
     * @param matrix
     * @return
     */
    private double cosineSimilarity(double[] aX, double[] aY, double[][] matrix) {
        int dim = aX.length;
        double xDotX = 0.0;
        double yDotY = 0.0;
        double xDotY = 0.0;
        for (int i=0; i<dim; i++) {
            // calculate beta vector values
            double bX = 0;
            double bY = 0;
            for (int j=0; j<dim; j++) {
                bX += matrix[i][j] * aX[j];
                bY += matrix[i][j] * aY[j];
            }
            // calculate cosine similarity between beta vector values
            xDotX += bX * bX;
            yDotY += bY * bY;
            xDotY += bX * bY;
        }
        return xDotY / Math.sqrt(xDotX * yDotY);
    }

    @Override
    public SimilarResultList mostSimilar(Item obj, int maxResults) throws DaoException {
        return mostSimilar(obj, maxResults, 0);
    }

    @Override
    public SimilarResultList mostSimilar(Item obj, int maxResults, double threshold) throws DaoException {
        TagAppGroup group = helperDao.getGroup(new DaoFilter().setItemId(obj.getItemId()));
        ConceptVector vector = new ConceptVector();
        for (TagApp t : group) {
            vector.increment(t.getConceptId());
        }
        return mostSimilar(vector, maxResults, threshold);
    }

    /**
     * Returns the most similar items to an array of TagApps.
     * @param tagApps
     * @param maxResults
     * @return
     * @throws DaoException
     */
    public SimilarResultList mostSimilar(TagApp[] tagApps, int maxResults) throws DaoException {
        return mostSimilar(tagApps, maxResults, 0);
    }

    /**
     * Returns the most similar items to an array of TagApps that pass the threshold.
     * @param tagApps
     * @param maxResults
     * @return
     * @throws DaoException
     */
    public SimilarResultList mostSimilar(TagApp[] tagApps, int maxResults, double threshold) throws DaoException {
        ConceptVector vector = new ConceptVector();
        for (TagApp t : tagApps) {
            vector.increment(t.getConceptId());
        }
        return mostSimilar(vector, maxResults, threshold);
    }

    /**
     * Returns the most similar items to a collection of TagApps.
     * @param tagApps
     * @param maxResults
     * @return
     * @throws DaoException
     */
    public SimilarResultList mostSimilar(Collection<TagApp> tagApps, int maxResults) throws DaoException {
        return mostSimilar(tagApps, maxResults, 0);
    }

    /**
     * Returns the most similar items to a collection of TagApps that pass the threshold.
     * @param tagApps
     * @param maxResults
     * @return
     * @throws DaoException
     */
    public SimilarResultList mostSimilar(Collection<TagApp> tagApps, int maxResults, double threshold) throws DaoException {
        ConceptVector vector = new ConceptVector();
        for (TagApp t : tagApps) {
            vector.increment(t.getConceptId());
        }
        return mostSimilar(vector, maxResults, threshold);
    }

    /**
     * Returns the most similar items to a concept vector.
     * @param vector
     * @param maxResults
     * @return
     * @throws DaoException
     */
    public SimilarResultList mostSimilar(ConceptVector vector, int maxResults) throws DaoException {
        return mostSimilar(vector, maxResults, 0);
    }

    /**
     * Returns the most similar items to a concept vector that pass the threshold.
     * @param vector
     * @param maxResults
     * @return
     * @throws DaoException
     */
    public SimilarResultList mostSimilar(ConceptVector vector, int maxResults, double threshold) throws DaoException {
        ConceptVector space = new ConceptVector();
        for (int id : vector.getVectorSpace()) {
            space.add(id);
            SimilarResultList conceptList = sim.mostSimilar(id, maxResults);
            for (SimilarResult result : conceptList) {
                space.add(result.getIntId());
            }
        }
        int[] vectorSpace = space.getVectorSpace();
        double[][] matrix = sim.cosimilarity(vectorSpace);
        Iterable<TagApp> iterable = helperDao.get(new DaoFilter().setConceptIds(vectorSpace));
        Map<String, Item> items = new HashMap<String, Item>();
        for (TagApp t : iterable) {
            items.put(t.getItem().getItemId(), t.getItem());
        }
        SimilarResultList list = new SimilarResultList(maxResults, threshold);
        for (Item item : items.values()) {
            list.add(new SimilarResult<Item>(item.getItemId(), item, similarity(vector, item, vectorSpace, matrix)));
        }
        list.lock();
        return list;
    }

    @Override
    public double[][] cosimilarity(Item[] objs) throws DaoException {
        int dim = objs.length;
        int[] vectorSpace = getVectorSpace(objs);
        double[][] matrix = sim.cosimilarity(vectorSpace);
        double[][] output = new double[dim][dim];
        for (int i=0; i<dim; i++) {
            for (int j=0; j<=i; j++) {
                // For efficiency, only calculate cosimilarity in the upper triangle of the matrix
                output[i][j] = similarity(objs[i], objs[j], vectorSpace, matrix);
                output[j][i] = output[i][j];
            }
        }
        return output;
    }

    @Override
    public double[][] cosimilarity(Item[] xObjs, Item[] yObjs) throws DaoException {
        int[] vectorSpace = getVectorSpace((Item[]) ArrayUtils.addAll(xObjs, yObjs));
        double[][] matrix = sim.cosimilarity(vectorSpace);
        double[][] output = new double[xObjs.length][yObjs.length];
        for (int i=0; i<xObjs.length; i++) {
            for (int j=0; j<yObjs.length; j++) {
                output[i][j] = similarity(xObjs[i], yObjs[j], vectorSpace, matrix);
            }
        }
        return output;
    }

    private int[] getVectorSpace(Item... items) throws DaoException {
        ConceptVector vectorSpace = new ConceptVector();
        for (Item item : items) {
            TagAppGroup group = helperDao.getGroup(new DaoFilter().setItemId(item.getItemId()));
            for (TagApp t : group.getTagApps()) {
                if (t.getConceptId() > -1) {
                    vectorSpace.add(t.getConceptId());
                }
            }
        }
        return vectorSpace.getVectorSpace();
    }

    public static class Provider extends org.wikapidia.conf.Provider<ItemSimilar> {
        public Provider(Configurator configurator, Configuration config) throws ConfigurationException {
            super(configurator, config);
        }

        @Override
        public Class getType() {
            return ItemSimilar.class;
        }

        @Override
        public String getPath() {
            return "sem-tag.sim.item";
        }

        @Override
        public ItemSimilar get(String name, Config config) throws ConfigurationException {
            if (!config.getString("type").equals("item")) {
                return null;
            }
            return new ItemSimilar(
                    getConfigurator().get(TagAppDao.class, config.getString("tagAppDao")),
                    getConfigurator().get(ConceptSimilar.class, config.getString("conceptSim"))
            );
        }
    }
}
